name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}
  REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run type-check

    - name: Run ESLint
      run: npm run lint

    - name: Build frontend assets
      run: |
        npm run build
        npm run css:build

    - name: Run Django tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        DJANGO_SECRET_KEY: test-secret-key-for-ci
        DJANGO_SETTINGS_MODULE: community_packing_list.settings
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate
        python manage.py test

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform=managed \
          --region=${{ env.REGION }} \
          --service-account=${{ env.SERVICE_NAME }}-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ secrets.DB_INSTANCE_NAME }} \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
          --set-secrets="DATABASE_URL=database-url:latest,DJANGO_SECRET_KEY=django-secret-key:latest,GS_BUCKET_NAME=static-bucket-name:latest,GS_MEDIA_BUCKET_NAME=media-bucket-name:latest" \
          --allow-unauthenticated \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=10 \
          --min-instances=0 \
          --concurrency=80 \
          --timeout=300 \
          --port=8080 \
          --no-traffic

    - name: Run database migrations
      run: |
        gcloud run jobs execute ${{ env.SERVICE_NAME }}-migrate \
          --region=${{ env.REGION }} \
          --wait

    - name: Collect static files
      run: |
        gcloud run jobs execute ${{ env.SERVICE_NAME }}-collectstatic \
          --region=${{ env.REGION }} \
          --wait

    - name: Route traffic to new revision
      run: |
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --to-latest \
          --region=${{ env.REGION }}

    - name: Get service URL
      id: service-url
      run: |
        URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")
        echo "url=$URL" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f ${{ steps.service-url.outputs.url }}/health/ || exit 1
        
        # Test main page loads
        curl -f ${{ steps.service-url.outputs.url }}/ || exit 1

    - name: Comment deployment URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Deployment complete!\n\n**Service URL:** ${{ steps.service-url.outputs.url }}'
          })

  cleanup:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Clean up old container images
      run: |
        # Keep only the 10 most recent images
        IMAGES_TO_DELETE=$(gcloud artifacts docker images list \
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }} \
          --sort-by="~CREATE_TIME" \
          --format="value(IMAGE)" \
          --limit=999 | tail -n +11)
        
        if [ ! -z "$IMAGES_TO_DELETE" ]; then
          echo "$IMAGES_TO_DELETE" | xargs -I {} gcloud artifacts docker images delete {} --quiet
        fi

    - name: Clean up unused Cloud Run revisions
      run: |
        # Keep only the 5 most recent revisions
        REVISIONS_TO_DELETE=$(gcloud run revisions list \
          --service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(metadata.name)" \
          --sort-by="~metadata.creationTimestamp" \
          --filter="spec.containers[0].image!=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" \
          --limit=999 | tail -n +5)
        
        if [ ! -z "$REVISIONS_TO_DELETE" ]; then
          echo "$REVISIONS_TO_DELETE" | xargs -I {} gcloud run revisions delete {} --region=${{ env.REGION }} --quiet
        fi