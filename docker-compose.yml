services:
  db:
    image: postgres:15-alpine # Using version 15 Alpine for a smaller image
    container_name: packing_list_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-packinglist_dev}
      - POSTGRES_USER=${DB_USER:-packinglist_user}
      - POSTGRES_PASSWORD=${DB_PASS:-supersecretpassword} # Change this in production!
    ports:
      - "${DB_PORT_HOST:-5433}:5432" # Expose DB port to host if needed for direct access (optional)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-packinglist_user} -d ${DB_NAME:-packinglist_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TypeScript development service for hot reloading
  typescript-dev:
    image: node:18-alpine
    container_name: packing_list_typescript_dev
    working_dir: /app
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev & npm run css:dev"
    environment:
      - NODE_ENV=development
    profiles:
      - dev

  web:
    build: 
      context: .
      
    container_name: packing_list_web
    command: ${WEB_COMMAND:-gunicorn community_packing_list.wsgi:application --bind 0.0.0.0:8000 --workers 4 --log-level info}
    volumes:
      - static_volume:/app/staticfiles # Only static files in prod
    ports:
      - "${WEB_PORT:-8000}:8000"
    env_file:
      - .env # Load environment variables from .env file
    environment:
      - DJANGO_SETTINGS_MODULE=community_packing_list.settings
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    profiles:
      - prod

  web-dev:
    build: 
      context: .
      
    container_name: packing_list_web_dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app # Mount code for live reload in dev
      - static_volume:/app/staticfiles
    ports:
      - "${WEB_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=community_packing_list.settings
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - dev

volumes:
  postgres_data: # Persists PostgreSQL data across container restarts
  static_volume: # Persists static files across container restarts
  node_modules: # Persists node_modules for faster rebuilds
