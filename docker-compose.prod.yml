# Docker Compose for Production Deployment
# Usage: docker-compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: packing_list_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - packing_list_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: packing_list_redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - packing_list_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: packing_list_web
    restart: always
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn community_packing_list.wsgi:application \
          --bind 0.0.0.0:8000 \
          --workers 4 \
          --threads 4 \
          --worker-class gthread \
          --worker-tmp-dir /dev/shm \
          --log-level info \
          --access-logfile - \
          --error-logfile - \
          --timeout 30 \
          --max-requests 1000 \
          --max-requests-jitter 50
      "
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=community_packing_list.settings
      - DB_ENGINE=django.db.backends.postgresql
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - NODE_ENV=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - packing_list_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: packing_list_nginx
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-site.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - packing_list_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (if needed for async tasks)
  # celery:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: packing_list_celery
  #   restart: always
  #   command: celery -A community_packing_list worker -l info
  #   volumes:
  #     - .:/app
  #   env_file:
  #     - .env
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=community_packing_list.settings
  #     - DB_HOST=db
  #     - REDIS_URL=redis://redis:6379/0
  #   depends_on:
  #     - db
  #     - redis
  #   networks:
  #     - packing_list_network

  # Celery Beat (if needed for scheduled tasks)
  # celery-beat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: packing_list_celery_beat
  #   restart: always
  #   command: celery -A community_packing_list beat -l info
  #   volumes:
  #     - .:/app
  #   env_file:
  #     - .env
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=community_packing_list.settings
  #     - DB_HOST=db
  #     - REDIS_URL=redis://redis:6379/0
  #   depends_on:
  #     - db
  #     - redis
  #   networks:
  #     - packing_list_network

networks:
  packing_list_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: