# Generated by Django 5.2.4 on 2025-08-06 05:27

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('packing_lists', '0014_add_item_image_field'),
    ]

    operations = [
        # Add critical indexes for scalability to 10,000+ users
        
        # Store location indexes for geographic queries
        migrations.RunSQL([
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_store_location ON packing_lists_store(latitude, longitude) WHERE latitude IS NOT NULL AND longitude IS NOT NULL;",
        ], reverse_sql=[
            "DROP INDEX IF EXISTS idx_store_location;",
        ]),
        
        # Item indexes for search and filtering
        migrations.RunSQL([
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_item_name_trgm ON packing_lists_item USING gin(name gin_trgm_ops);",
        ], reverse_sql=[
            "DROP INDEX IF EXISTS idx_item_name_trgm;",
        ]),
        
        # PackingListItem indexes for detail view optimization
        migrations.RunSQL([
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_packinglistitem_list_section ON packing_lists_packinglistitem(packing_list_id, section);",
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_packinglistitem_list_required ON packing_lists_packinglistitem(packing_list_id, required);",
        ], reverse_sql=[
            "DROP INDEX IF EXISTS idx_packinglistitem_list_section;",
            "DROP INDEX IF EXISTS idx_packinglistitem_list_required;",
        ]),
        
        # Price indexes for aggregation and filtering
        migrations.RunSQL([
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_price_item_confidence ON packing_lists_price(item_id, confidence, created_at);",
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_price_store_date ON packing_lists_price(store_id, date_purchased) WHERE date_purchased IS NOT NULL;",
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_price_per_unit ON packing_lists_price((price/quantity)) WHERE quantity > 0;",
        ], reverse_sql=[
            "DROP INDEX IF EXISTS idx_price_item_confidence;",
            "DROP INDEX IF EXISTS idx_price_store_date;",
            "DROP INDEX IF EXISTS idx_price_per_unit;",
        ]),
        
        # Vote indexes for aggregation
        migrations.RunSQL([
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_vote_price_correct ON packing_lists_vote(price_id, is_correct_price);",
        ], reverse_sql=[
            "DROP INDEX IF EXISTS idx_vote_price_correct;",
        ]),
        
        # Composite indexes for common query patterns
        migrations.RunSQL([
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_price_complex_filter ON packing_lists_price(item_id, confidence, is_verified, flagged_count) WHERE flagged_count < 3;",
        ], reverse_sql=[
            "DROP INDEX IF EXISTS idx_price_complex_filter;",
        ]),
    ]
